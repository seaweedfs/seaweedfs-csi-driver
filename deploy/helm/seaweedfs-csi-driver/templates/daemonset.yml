{{- if .Values.node.enabled}}
---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: {{ template "seaweedfs-csi-driver.name" . }}-node
spec:
  selector:
    matchLabels:
      app: {{ template "seaweedfs-csi-driver.name" . }}-node
  updateStrategy:
    {{ toYaml .Values.node.updateStrategy | nindent 4 }}
  template:
    metadata:
      labels:
        app: {{ template "seaweedfs-csi-driver.name" . }}-node
      {{- if .Values.node.injectTopologyInfoFromNodeLabel.enabled }}
      annotations:
        # Tell KubeMod to make node metadata available to pod ModRules.
        ref.kubemod.io/inject-node-ref: "true"
      {{- end }}
    spec:
      priorityClassName: system-node-critical
      serviceAccountName: {{ template "seaweedfs-csi-driver.name" . }}-node-sa
      #hostNetwork: true
      #dnsPolicy: ClusterFirstWithHostNet
      {{- with .Values.node.affinity }}
      affinity: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.node.tolerations }}
      tolerations: {{ toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: driver-registrar
          image: {{ .Values.csiNodeDriverRegistrar.image }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
            - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
          env:
            - name: ADDRESS
              value: /csi/csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: {{ .Values.node.volumes.plugins_dir }}/{{ .Values.driverName }}/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          resources:
            {{ toYaml .Values.csiNodeDriverRegistrar.resources | nindent 12 }}
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi/
            - name: registration-dir
              mountPath: /registration/
        - name: csi-seaweedfs-plugin
          securityContext:
            {{ toYaml .Values.seaweedfsCsiPlugin.securityContext | nindent 12 }}
          image: {{.Values.seaweedfsCsiPlugin.image }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          args:
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--filer=$(SEAWEEDFS_FILER)"
            - "--nodeid=$(NODE_ID)"
            - "--cacheDir=/var/cache/seaweedfs"
            - "--dataLocality={{ .Values.dataLocality }}"
            - "--node"
            - "--controller"
            - "--attacher"
            {{- if .Values.node.injectTopologyInfoFromNodeLabel.enabled }}
            - "--dataCenter=$(DATACENTER)"
            {{- end }}
          env:
            - name: CSI_ENDPOINT
              value: unix:///csi/csi.sock
            - name: SEAWEEDFS_FILER
              value: {{ .Values.seaweedfsFiler | quote }}
            - name: NODE_ID
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            {{- if .Values.node.injectTopologyInfoFromNodeLabel.enabled }}
            - name: DATACENTER
              valueFrom:
                fieldRef:
                  # Injected by ModRule 'inject-topology-labels'
                  fieldPath: metadata.labels['dataCenter']
            {{- end }}
            {{- if .Values.tlsSecret }}
            - name: WEED_GRPC_CLIENT_KEY
              value: /var/run/secrets/app/tls/tls.key
            - name: WEED_GRPC_CLIENT_CERT
              value: /var/run/secrets/app/tls/tls.crt
            - name: WEED_GRPC_CA
              value: /var/run/secrets/app/tls/ca.crt
            {{- end }}
            {{- if .Values.logVerbosity }}
            - name: WEED_V
              value: {{ .Values.logVerbosity | quote }}
            {{- end }}
          resources:
            {{ toYaml .Values.seaweedfsCsiPlugin.resources | nindent 12 }}
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi
            - name: plugins-dir
              mountPath: {{ .Values.node.volumes.plugins_dir }}
              mountPropagation: "Bidirectional"
            - name: pods-mount-dir
              mountPath: {{ .Values.node.volumes.pods_mount_dir }}
              mountPropagation: "Bidirectional"
            - mountPath: /dev
              name: device-dir
            {{- if .Values.tlsSecret }}
            - name: tls
              mountPath: /var/run/secrets/app/tls
            {{- end }}
            - name: cache
              mountPath: /var/cache/seaweedfs
      volumes:
        - name: registration-dir
          hostPath:
            path: {{ .Values.node.volumes.registration_dir }}
            type: DirectoryOrCreate
        - name: plugin-dir
          hostPath:
            path: {{ .Values.node.volumes.plugins_dir }}/{{ .Values.driverName }}
            type: DirectoryOrCreate
        - name: plugins-dir
          hostPath:
            path: {{ .Values.node.volumes.plugins_dir }}
            type: Directory
        - name: pods-mount-dir
          hostPath:
            path: {{ .Values.node.volumes.pods_mount_dir }}
            type: Directory
        - name: device-dir
          hostPath:
            path: /dev
        - name: cache
          emptyDir: {}
        {{- if .Values.tlsSecret }}
        - name: tls
          secret:
            secretName: {{ .Values.tlsSecret }}
        {{- end }}
{{- end }}
